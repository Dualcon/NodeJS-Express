##Request & Response

Express application makes use of a callback function whose parameters are request and response objects.
app.get('/', function (req, res) {
   // --
})
You can check further detail on both the objects:
Request Object - The request object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on.
Response Object - The response object represents the HTTP response that an Express app sends when it gets an HTTP request.
You can print req and res objects which provide lot of information related to HTTP request and response including cookies, sessions, URL etc.

##Basic Routing

We have seen a basic application which serves HTTP request for the homepage. Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on).
We will extend our Hello World program to add functionality to handle more type HTTP requests.

"""
var express = require('express');

var app = express();

//respond with "hello world" when a GET request is made to the homepage
app.get('/', function(req, res) {
	res.send('Hello');
});

//This responds a POST request for the homepage
app.post('/', function (req, res) {
	console.log("Got a POST request for the homepage");
	res.send('Hello POST');
});

//This responds a DELETE request for the /del_user page.
app.delete('/delUser', function (req, res) {
	console.log("Got a DELETE request for /del_user");
	res.send('Hello DELETE');
});

//This responds a GET request for the /list_user page.
app.get('/list_user', function (req, res) {
	console.log("Got a GET request for /list_user");
	res.send('Page Listing');
});

//This responds a GET request for abcd, abxcd, ab123cd, and so on
app.get('/ab*cd', function(req, res) {   
	console.log("Got a GET request for /ab*cd");
	res.send('Page Pattern Match');
});

app.listen(3000, function () {
	console.log('Example app listening on port 3000!');
});
"""

Save the above code in a file named server.js and run it with the following command.
$ node server.js

You will see the following output:
Example app listening at http://0.0.0.0:8081

Now you can try different requests at http://127.0.0.1:8081 to see the output generated by server.js. Following are few screens showing different responses for different URLs.
http://127.0.0.1:8081/list_user
http://127.0.0.1:8081/abcd
http://127.0.0.1:8081/abcdefg